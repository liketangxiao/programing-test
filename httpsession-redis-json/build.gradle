buildscript {
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.8.RELEASE")        
        classpath("io.spring.gradle:dependency-management-plugin:0.6.1.RELEASE")
		classpath("com.bmuschko:gradle-tomcat-plugin:2.2.5")
		classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7")
		classpath("io.spring.gradle:spring-io-plugin:0.0.4.RELEASE")
		classpath('me.champeau.gradle:gradle-javadoc-hotfix-plugin:0.1')
		classpath("org.asciidoctor:asciidoctor-gradle-plugin:1.5.2")
		classpath('com.github.ben-manes:gradle-versions-plugin:0.12.0')
		classpath("org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1")
    }
}

repositories {
	maven { url "https://repo.spring.io/plugins-release" }
	maven { url 'https://repo.spring.io/libs-snapshot' }
	mavenLocal()
	mavenCentral()
}

ext {
    jsonassertVersion="1.3.0"
    assertjVersion = "2.4.0"
}
ext.releaseBuild = version.endsWith('RELEASE')
ext.snapshotBuild = version.endsWith('SNAPSHOT')
ext.milestoneBuild = !(releaseBuild || snapshotBuild)
ext['spring-security.version'] = springSecurityVersion

ext.springBootVersion = '1.3.8.RELEASE'
ext.JAVA_GRADLE = "$rootDir/gradle/java.gradle"
ext.IDE_GRADLE = "$rootDir/gradle/ide.gradle"

group = 'samples'

apply from: JAVA_GRADLE

configurations.all {
   resolutionStrategy {
       force 'org.springframework.data:spring-data-redis:$springDataRedisVersion'
   }
}

dependencies {
	compile "org.springframework.session:spring-session:1.3.1.YS.RELEASE",
			"org.springframework.data:spring-data-redis:$springDataRedisVersion",
			"redis.clients:jedis:$jedisVersion",
            /*"org.springframework.boot:spring-boot-starter-redis:$springBootVersion",*/
            "org.springframework.boot:spring-boot-starter-web:$springBootVersion",
            "org.springframework.boot:spring-boot-starter-thymeleaf:$springBootVersion",
            "org.springframework.boot:spring-boot-starter-security:$springBootVersion",
            "nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect",
            "biz.paluch.redis:lettuce:$lettuceVersion",
            "org.apache.httpcomponents:httpclient:4.5.5",
            "org.apache.commons:commons-lang3:3.1",
            "org.springframework.security:spring-security-core:$springSecurityVersion",
			"org.springframework.security:spring-security-web:$springSecurityVersion"

    testCompile "org.springframework.boot:spring-boot-starter-test:$springBootVersion",
            "org.assertj:assertj-core:$assertjVersion"
    testCompile "org.skyscreamer:jsonassert:$jsonassertVersion"
    testCompile "org.assertj:assertj-core:$assertjVersion"
    integrationTestCompile gebDependencies,
            "org.spockframework:spock-spring:$spockVersion"
}
	
apply plugin: 'spring-boot'
apply plugin: 'base'

//tasks.findByPath("artifactoryPublish")?.enabled = false

jar{
	baseName = 'httpsession-redis-json'
	version='1.3.1.RELEASE'
}
 
integrationTest {
    doFirst {
        def port = reservePort()

        def host = 'localhost:' + port
        systemProperties['geb.build.baseUrl'] = 'http://'+host+'/'
        systemProperties['geb.build.reportsDir'] = 'build/geb-reports'
        systemProperties['server.port'] = port
        systemProperties['management.port'] = 0

        systemProperties['spring.session.redis.namespace'] = project.name
    }
    jvmArgs "-XX:-UseSplitVerifier"
}

integrationTest {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

def reservePort() {
    def socket = new ServerSocket(0)
    def result = socket.localPort
    socket.close()
    result
}